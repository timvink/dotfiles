###########
# Aliases
###########

# Git stuff
alias gst='git status'
alias gp='git pull'
alias gc='git commit -m'
alias gco='git checkout'
alias gaa='git add --all && gst'
alias gl='git log --graph'
alias gpo='git push origin'
alias gpom='git push origin master'

# File system
# alias ls='ls -lash'
alias grep='grep --color=auto'
alias cd2="cd ../.."
alias cd3="cd ../../.."
alias ...="cd ../.."
alias ....="cd ../../.."
alias del="rmtrash"
alias rm="rm -i" # to get into a better habit of using del

# Bash commands
alias e="exit"
alias c="clear"

# Other
alias venv='source .venv/bin/activate'

{{ if ne .chezmoi.os "windows" }}

# Use eza, a better colorized ls
alias ls='eza -lah --long --grid --time-style=long-iso'
alias lss='eza -ah1 --time-style=long-iso'
alias tree='eza --tree --level 3'

# Use bat, a better colorized cat
alias cat='bat'

# Use neovim instead of vim
alias vim='nvim'
alias n='nvim'

{{ end }}

###########
# Settings
###########

export VISUAL="vim"
export EDITOR="vim"

###########
# Functions
###########

# Going up
# https://stackoverflow.com/questions/12198222/go-few-directories-up-in-linux
up() { local p= i=${1:-1}; while (( i-- )); do p+=../; done; cd "$p$2" && pwd; }


# make and change dir
mkcdir ()
{
    mkdir -p -- "$1" &&
      cd -P -- "$1"
}

# Quickly open google chrome (mac only)
alias g='/usr/bin/open -a "/Applications/Google Chrome.app"'
gs() {
    if read  -t 0 a; then
        query="$a"
    else
        query="$*"
    fi
    if [ "$OSTYPE" == "linux-gnu" ]
    then
        google-chrome "http://www.google.nl/search?q=$query"
    else
        open -a "Google Chrome" "http://www.google.nl/search?q=$query"
    fi
}


# Append gitignore
append_gitignore() {
  curl -sLw "\n" 	https://www.gitignore.io/api/r,macos,python,pycharm,windows,visualstudio,visualstudiocode,jupyternotebooks >> .gitignore
  awk '!a[$0]++' .gitignore > gitignore
  mv gitignore .gitignore
}

# Create a release
# Usage examples: 
# create_release v1.2.3
# create_release # detects python package version
create_release() {

    # Clean up and install deps
    rm -rf dist/ build/

    # Check branch name and branch status
    branch_name=\\$(git branch --show-current)
    if [ "$branch_name" != "main" ] && [ "$branch_name" != "master" ]; then
        echo "WARNING: You are on branch '$branch_name'."
        echo "Consider switching to main or master unless you know what you're doing."
    fi

    # Make sure we don't have remote changes
    fetch_status=\\$(git fetch --dry-run)
    if [ -n "\\$fetch_status" ]; then
        echo "There are changes on the remote. Please pull changes before creating a release."
        return 1
    fi
    
    # Check if the working directory is clean
    git diff --quiet --cached && git diff --quiet
    if [ $? -ne 0 ]; then
        echo "Error: Your working directory is not clean. Commit or stash your changes before tagging."
        return 1
    fi
    
    # Ensure a version argument is provided
    if [ -z "$1" ]; then
        # Build the package
        uv build

        # Extract version from the build
        detected_version=\\$(ls dist/*.tar.gz | rev | cut -d '-' -f1 | rev | sed 's/\\.tar\\.gz\\$//')

        # Ask user if detection version is ok
        read -p "Detected version: $detected_version. Is this correct? (y/n): " confirm
        if [ "$confirm" != "y" ] && [ "$confirm" != "Y" ]; then
            exit 1
        else
            VERSION=$detected_version
        fi
    fi


    # Create and push the tag
    git tag -a "$VERSION" -m "Release $VERSION"
    git push origin "$VERSION"
}
